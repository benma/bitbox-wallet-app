// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages/hww.proto

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	messages/hww.proto

It has these top-level messages:
	Error
	Success
	RandomNumberResponse
	RandomNumberRequest
	DeviceInfoRequest
	DeviceInfoResponse
	SetDeviceNameRequest
	SetDeviceLanguageRequest
	SetPasswordRequest
	CreateBackupRequest
	RestoreBackupRequest
	ListBackupsRequest
	CheckBackupRequest
	CheckBackupResponse
	ShowMnemonicRequest
	InsertRemoveSDCardRequest
	CheckSDCardRequest
	CheckSDCardResponse
	BTCPubRequest
	PubResponse
	BackupInfo
	ListBackupsResponse
	BTCSignInitRequest
	BTCSignNextResponse
	BTCSignInputRequest
	BTCSignOutputRequest
	SetMnemonicPassphraseEnabledRequest
	PerformAttestationRequest
	PerformAttestationResponse
	RebootRequest
	ETHPubRequest
	ETHSignRequest
	ETHSignResponse
	ETHRequest
	ETHResponse
	SignRequest
	Request
	Response
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BTCCoin int32

const (
	BTCCoin_BTC  BTCCoin = 0
	BTCCoin_TBTC BTCCoin = 1
	BTCCoin_LTC  BTCCoin = 2
	BTCCoin_TLTC BTCCoin = 3
)

var BTCCoin_name = map[int32]string{
	0: "BTC",
	1: "TBTC",
	2: "LTC",
	3: "TLTC",
}
var BTCCoin_value = map[string]int32{
	"BTC":  0,
	"TBTC": 1,
	"LTC":  2,
	"TLTC": 3,
}

func (x BTCCoin) String() string {
	return proto.EnumName(BTCCoin_name, int32(x))
}
func (BTCCoin) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BTCScriptType int32

const (
	BTCScriptType_SCRIPT_UNKNOWN     BTCScriptType = 0
	BTCScriptType_SCRIPT_P2PKH       BTCScriptType = 1
	BTCScriptType_SCRIPT_P2WPKH_P2SH BTCScriptType = 2
	BTCScriptType_SCRIPT_P2WPKH      BTCScriptType = 3
)

var BTCScriptType_name = map[int32]string{
	0: "SCRIPT_UNKNOWN",
	1: "SCRIPT_P2PKH",
	2: "SCRIPT_P2WPKH_P2SH",
	3: "SCRIPT_P2WPKH",
}
var BTCScriptType_value = map[string]int32{
	"SCRIPT_UNKNOWN":     0,
	"SCRIPT_P2PKH":       1,
	"SCRIPT_P2WPKH_P2SH": 2,
	"SCRIPT_P2WPKH":      3,
}

func (x BTCScriptType) String() string {
	return proto.EnumName(BTCScriptType_name, int32(x))
}
func (BTCScriptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BTCOutputType int32

const (
	BTCOutputType_UNKNOWN BTCOutputType = 0
	BTCOutputType_P2PKH   BTCOutputType = 1
	BTCOutputType_P2SH    BTCOutputType = 2
	BTCOutputType_P2WPKH  BTCOutputType = 3
	BTCOutputType_P2WSH   BTCOutputType = 4
)

var BTCOutputType_name = map[int32]string{
	0: "UNKNOWN",
	1: "P2PKH",
	2: "P2SH",
	3: "P2WPKH",
	4: "P2WSH",
}
var BTCOutputType_value = map[string]int32{
	"UNKNOWN": 0,
	"P2PKH":   1,
	"P2SH":    2,
	"P2WPKH":  3,
	"P2WSH":   4,
}

func (x BTCOutputType) String() string {
	return proto.EnumName(BTCOutputType_name, int32(x))
}
func (BTCOutputType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ETHCoin int32

const (
	ETHCoin_ETH        ETHCoin = 0
	ETHCoin_RopstenETH ETHCoin = 1
	ETHCoin_RinkebyETH ETHCoin = 2
)

var ETHCoin_name = map[int32]string{
	0: "ETH",
	1: "RopstenETH",
	2: "RinkebyETH",
}
var ETHCoin_value = map[string]int32{
	"ETH":        0,
	"RopstenETH": 1,
	"RinkebyETH": 2,
}

func (x ETHCoin) String() string {
	return proto.EnumName(ETHCoin_name, int32(x))
}
func (ETHCoin) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type InsertRemoveSDCardRequest_SDCardAction int32

const (
	InsertRemoveSDCardRequest_REMOVE_CARD InsertRemoveSDCardRequest_SDCardAction = 0
	InsertRemoveSDCardRequest_INSERT_CARD InsertRemoveSDCardRequest_SDCardAction = 1
)

var InsertRemoveSDCardRequest_SDCardAction_name = map[int32]string{
	0: "REMOVE_CARD",
	1: "INSERT_CARD",
}
var InsertRemoveSDCardRequest_SDCardAction_value = map[string]int32{
	"REMOVE_CARD": 0,
	"INSERT_CARD": 1,
}

func (x InsertRemoveSDCardRequest_SDCardAction) String() string {
	return proto.EnumName(InsertRemoveSDCardRequest_SDCardAction_name, int32(x))
}
func (InsertRemoveSDCardRequest_SDCardAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

type BTCPubRequest_OutputType int32

const (
	BTCPubRequest_TPUB    BTCPubRequest_OutputType = 0
	BTCPubRequest_XPUB    BTCPubRequest_OutputType = 1
	BTCPubRequest_YPUB    BTCPubRequest_OutputType = 2
	BTCPubRequest_ZPUB    BTCPubRequest_OutputType = 3
	BTCPubRequest_ADDRESS BTCPubRequest_OutputType = 4
)

var BTCPubRequest_OutputType_name = map[int32]string{
	0: "TPUB",
	1: "XPUB",
	2: "YPUB",
	3: "ZPUB",
	4: "ADDRESS",
}
var BTCPubRequest_OutputType_value = map[string]int32{
	"TPUB":    0,
	"XPUB":    1,
	"YPUB":    2,
	"ZPUB":    3,
	"ADDRESS": 4,
}

func (x BTCPubRequest_OutputType) String() string {
	return proto.EnumName(BTCPubRequest_OutputType_name, int32(x))
}
func (BTCPubRequest_OutputType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 0} }

type BTCSignNextResponse_Type int32

const (
	BTCSignNextResponse_INPUT_PASS1        BTCSignNextResponse_Type = 0
	BTCSignNextResponse_OUTPUT             BTCSignNextResponse_Type = 1
	BTCSignNextResponse_INPUT_PASS2_COMMIT BTCSignNextResponse_Type = 2
	BTCSignNextResponse_INPUT_PASS2_SIGN   BTCSignNextResponse_Type = 3
	BTCSignNextResponse_DONE               BTCSignNextResponse_Type = 4
)

var BTCSignNextResponse_Type_name = map[int32]string{
	0: "INPUT_PASS1",
	1: "OUTPUT",
	2: "INPUT_PASS2_COMMIT",
	3: "INPUT_PASS2_SIGN",
	4: "DONE",
}
var BTCSignNextResponse_Type_value = map[string]int32{
	"INPUT_PASS1":        0,
	"OUTPUT":             1,
	"INPUT_PASS2_COMMIT": 2,
	"INPUT_PASS2_SIGN":   3,
	"DONE":               4,
}

func (x BTCSignNextResponse_Type) String() string {
	return proto.EnumName(BTCSignNextResponse_Type_name, int32(x))
}
func (BTCSignNextResponse_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

type ETHPubRequest_OutputType int32

const (
	ETHPubRequest_ADDRESS ETHPubRequest_OutputType = 0
	ETHPubRequest_XPUB    ETHPubRequest_OutputType = 1
)

var ETHPubRequest_OutputType_name = map[int32]string{
	0: "ADDRESS",
	1: "XPUB",
}
var ETHPubRequest_OutputType_value = map[string]int32{
	"ADDRESS": 0,
	"XPUB":    1,
}

func (x ETHPubRequest_OutputType) String() string {
	return proto.EnumName(ETHPubRequest_OutputType_name, int32(x))
}
func (ETHPubRequest_OutputType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{30, 0} }

type Error struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Success struct {
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RandomNumberResponse struct {
	Number []byte `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *RandomNumberResponse) Reset()                    { *m = RandomNumberResponse{} }
func (m *RandomNumberResponse) String() string            { return proto.CompactTextString(m) }
func (*RandomNumberResponse) ProtoMessage()               {}
func (*RandomNumberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RandomNumberResponse) GetNumber() []byte {
	if m != nil {
		return m.Number
	}
	return nil
}

type RandomNumberRequest struct {
}

func (m *RandomNumberRequest) Reset()                    { *m = RandomNumberRequest{} }
func (m *RandomNumberRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomNumberRequest) ProtoMessage()               {}
func (*RandomNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DeviceInfoRequest struct {
}

func (m *DeviceInfoRequest) Reset()                    { *m = DeviceInfoRequest{} }
func (m *DeviceInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfoRequest) ProtoMessage()               {}
func (*DeviceInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DeviceInfoResponse struct {
	Name                         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Initialized                  bool   `protobuf:"varint,2,opt,name=initialized" json:"initialized,omitempty"`
	Version                      string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	MnemonicPassphraseEnabled    bool   `protobuf:"varint,4,opt,name=mnemonic_passphrase_enabled,json=mnemonicPassphraseEnabled" json:"mnemonic_passphrase_enabled,omitempty"`
	MonotonicIncrementsRemaining uint32 `protobuf:"varint,5,opt,name=monotonic_increments_remaining,json=monotonicIncrementsRemaining" json:"monotonic_increments_remaining,omitempty"`
}

func (m *DeviceInfoResponse) Reset()                    { *m = DeviceInfoResponse{} }
func (m *DeviceInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfoResponse) ProtoMessage()               {}
func (*DeviceInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeviceInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceInfoResponse) GetInitialized() bool {
	if m != nil {
		return m.Initialized
	}
	return false
}

func (m *DeviceInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DeviceInfoResponse) GetMnemonicPassphraseEnabled() bool {
	if m != nil {
		return m.MnemonicPassphraseEnabled
	}
	return false
}

func (m *DeviceInfoResponse) GetMonotonicIncrementsRemaining() uint32 {
	if m != nil {
		return m.MonotonicIncrementsRemaining
	}
	return 0
}

type SetDeviceNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SetDeviceNameRequest) Reset()                    { *m = SetDeviceNameRequest{} }
func (m *SetDeviceNameRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDeviceNameRequest) ProtoMessage()               {}
func (*SetDeviceNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetDeviceNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SetDeviceLanguageRequest struct {
	Language string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
}

func (m *SetDeviceLanguageRequest) Reset()                    { *m = SetDeviceLanguageRequest{} }
func (m *SetDeviceLanguageRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDeviceLanguageRequest) ProtoMessage()               {}
func (*SetDeviceLanguageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetDeviceLanguageRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type SetPasswordRequest struct {
	Entropy []byte `protobuf:"bytes,1,opt,name=entropy,proto3" json:"entropy,omitempty"`
}

func (m *SetPasswordRequest) Reset()                    { *m = SetPasswordRequest{} }
func (m *SetPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPasswordRequest) ProtoMessage()               {}
func (*SetPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SetPasswordRequest) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// Timestamp must be in UTC
type CreateBackupRequest struct {
	Timestamp      uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TimezoneOffset int32  `protobuf:"varint,2,opt,name=timezone_offset,json=timezoneOffset" json:"timezone_offset,omitempty"`
}

func (m *CreateBackupRequest) Reset()                    { *m = CreateBackupRequest{} }
func (m *CreateBackupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBackupRequest) ProtoMessage()               {}
func (*CreateBackupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateBackupRequest) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CreateBackupRequest) GetTimezoneOffset() int32 {
	if m != nil {
		return m.TimezoneOffset
	}
	return 0
}

type RestoreBackupRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RestoreBackupRequest) Reset()                    { *m = RestoreBackupRequest{} }
func (m *RestoreBackupRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreBackupRequest) ProtoMessage()               {}
func (*RestoreBackupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RestoreBackupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListBackupsRequest struct {
}

func (m *ListBackupsRequest) Reset()                    { *m = ListBackupsRequest{} }
func (m *ListBackupsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBackupsRequest) ProtoMessage()               {}
func (*ListBackupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CheckBackupRequest struct {
	Silent bool `protobuf:"varint,1,opt,name=silent" json:"silent,omitempty"`
}

func (m *CheckBackupRequest) Reset()                    { *m = CheckBackupRequest{} }
func (m *CheckBackupRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckBackupRequest) ProtoMessage()               {}
func (*CheckBackupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CheckBackupRequest) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

type CheckBackupResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CheckBackupResponse) Reset()                    { *m = CheckBackupResponse{} }
func (m *CheckBackupResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckBackupResponse) ProtoMessage()               {}
func (*CheckBackupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CheckBackupResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ShowMnemonicRequest struct {
}

func (m *ShowMnemonicRequest) Reset()                    { *m = ShowMnemonicRequest{} }
func (m *ShowMnemonicRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowMnemonicRequest) ProtoMessage()               {}
func (*ShowMnemonicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type InsertRemoveSDCardRequest struct {
	Action InsertRemoveSDCardRequest_SDCardAction `protobuf:"varint,1,opt,name=action,enum=InsertRemoveSDCardRequest_SDCardAction" json:"action,omitempty"`
}

func (m *InsertRemoveSDCardRequest) Reset()                    { *m = InsertRemoveSDCardRequest{} }
func (m *InsertRemoveSDCardRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertRemoveSDCardRequest) ProtoMessage()               {}
func (*InsertRemoveSDCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *InsertRemoveSDCardRequest) GetAction() InsertRemoveSDCardRequest_SDCardAction {
	if m != nil {
		return m.Action
	}
	return InsertRemoveSDCardRequest_REMOVE_CARD
}

type CheckSDCardRequest struct {
}

func (m *CheckSDCardRequest) Reset()                    { *m = CheckSDCardRequest{} }
func (m *CheckSDCardRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckSDCardRequest) ProtoMessage()               {}
func (*CheckSDCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type CheckSDCardResponse struct {
	Inserted bool `protobuf:"varint,1,opt,name=inserted" json:"inserted,omitempty"`
}

func (m *CheckSDCardResponse) Reset()                    { *m = CheckSDCardResponse{} }
func (m *CheckSDCardResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckSDCardResponse) ProtoMessage()               {}
func (*CheckSDCardResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CheckSDCardResponse) GetInserted() bool {
	if m != nil {
		return m.Inserted
	}
	return false
}

type BTCPubRequest struct {
	Keypath    []uint32                 `protobuf:"varint,1,rep,packed,name=keypath" json:"keypath,omitempty"`
	ScriptType BTCScriptType            `protobuf:"varint,2,opt,name=script_type,json=scriptType,enum=BTCScriptType" json:"script_type,omitempty"`
	Coin       BTCCoin                  `protobuf:"varint,3,opt,name=coin,enum=BTCCoin" json:"coin,omitempty"`
	OutputType BTCPubRequest_OutputType `protobuf:"varint,4,opt,name=output_type,json=outputType,enum=BTCPubRequest_OutputType" json:"output_type,omitempty"`
	Display    bool                     `protobuf:"varint,5,opt,name=display" json:"display,omitempty"`
}

func (m *BTCPubRequest) Reset()                    { *m = BTCPubRequest{} }
func (m *BTCPubRequest) String() string            { return proto.CompactTextString(m) }
func (*BTCPubRequest) ProtoMessage()               {}
func (*BTCPubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BTCPubRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func (m *BTCPubRequest) GetScriptType() BTCScriptType {
	if m != nil {
		return m.ScriptType
	}
	return BTCScriptType_SCRIPT_UNKNOWN
}

func (m *BTCPubRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCPubRequest) GetOutputType() BTCPubRequest_OutputType {
	if m != nil {
		return m.OutputType
	}
	return BTCPubRequest_TPUB
}

func (m *BTCPubRequest) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

type PubResponse struct {
	Pub string `protobuf:"bytes,1,opt,name=pub" json:"pub,omitempty"`
}

func (m *PubResponse) Reset()                    { *m = PubResponse{} }
func (m *PubResponse) String() string            { return proto.CompactTextString(m) }
func (*PubResponse) ProtoMessage()               {}
func (*PubResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PubResponse) GetPub() string {
	if m != nil {
		return m.Pub
	}
	return ""
}

type BackupInfo struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Timestamp      uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	TimezoneOffset uint32 `protobuf:"varint,3,opt,name=timezone_offset,json=timezoneOffset" json:"timezone_offset,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *BackupInfo) Reset()                    { *m = BackupInfo{} }
func (m *BackupInfo) String() string            { return proto.CompactTextString(m) }
func (*BackupInfo) ProtoMessage()               {}
func (*BackupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *BackupInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BackupInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BackupInfo) GetTimezoneOffset() uint32 {
	if m != nil {
		return m.TimezoneOffset
	}
	return 0
}

func (m *BackupInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListBackupsResponse struct {
	Info []*BackupInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *ListBackupsResponse) Reset()                    { *m = ListBackupsResponse{} }
func (m *ListBackupsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBackupsResponse) ProtoMessage()               {}
func (*ListBackupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ListBackupsResponse) GetInfo() []*BackupInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type BTCSignInitRequest struct {
	Coin         BTCCoin       `protobuf:"varint,1,opt,name=coin,enum=BTCCoin" json:"coin,omitempty"`
	ScriptType   BTCScriptType `protobuf:"varint,2,opt,name=script_type,json=scriptType,enum=BTCScriptType" json:"script_type,omitempty"`
	Bip44Account uint32        `protobuf:"varint,3,opt,name=bip44_account,json=bip44Account" json:"bip44_account,omitempty"`
	Version      uint32        `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	NumInputs    uint32        `protobuf:"varint,5,opt,name=num_inputs,json=numInputs" json:"num_inputs,omitempty"`
	NumOutputs   uint32        `protobuf:"varint,6,opt,name=num_outputs,json=numOutputs" json:"num_outputs,omitempty"`
	Locktime     uint32        `protobuf:"varint,7,opt,name=locktime" json:"locktime,omitempty"`
}

func (m *BTCSignInitRequest) Reset()                    { *m = BTCSignInitRequest{} }
func (m *BTCSignInitRequest) String() string            { return proto.CompactTextString(m) }
func (*BTCSignInitRequest) ProtoMessage()               {}
func (*BTCSignInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *BTCSignInitRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCSignInitRequest) GetScriptType() BTCScriptType {
	if m != nil {
		return m.ScriptType
	}
	return BTCScriptType_SCRIPT_UNKNOWN
}

func (m *BTCSignInitRequest) GetBip44Account() uint32 {
	if m != nil {
		return m.Bip44Account
	}
	return 0
}

func (m *BTCSignInitRequest) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BTCSignInitRequest) GetNumInputs() uint32 {
	if m != nil {
		return m.NumInputs
	}
	return 0
}

func (m *BTCSignInitRequest) GetNumOutputs() uint32 {
	if m != nil {
		return m.NumOutputs
	}
	return 0
}

func (m *BTCSignInitRequest) GetLocktime() uint32 {
	if m != nil {
		return m.Locktime
	}
	return 0
}

type BTCSignNextResponse struct {
	Type  BTCSignNextResponse_Type `protobuf:"varint,1,opt,name=type,enum=BTCSignNextResponse_Type" json:"type,omitempty"`
	Index uint32                   `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// Response payload.
	// For INPUT_PASS2_COMMIT: 65 byte client nonce commitment (uncompressed pubkey)
	// For INPUT_PASS2_SIGN: 64 bytes (32 bytes big endian R, 32 bytes big endian S).
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BTCSignNextResponse) Reset()                    { *m = BTCSignNextResponse{} }
func (m *BTCSignNextResponse) String() string            { return proto.CompactTextString(m) }
func (*BTCSignNextResponse) ProtoMessage()               {}
func (*BTCSignNextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *BTCSignNextResponse) GetType() BTCSignNextResponse_Type {
	if m != nil {
		return m.Type
	}
	return BTCSignNextResponse_INPUT_PASS1
}

func (m *BTCSignNextResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BTCSignNextResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BTCSignInputRequest struct {
	// Types that are valid to be assigned to Request:
	//	*BTCSignInputRequest_Input_
	//	*BTCSignInputRequest_Sign
	Request isBTCSignInputRequest_Request `protobuf_oneof:"request"`
}

func (m *BTCSignInputRequest) Reset()                    { *m = BTCSignInputRequest{} }
func (m *BTCSignInputRequest) String() string            { return proto.CompactTextString(m) }
func (*BTCSignInputRequest) ProtoMessage()               {}
func (*BTCSignInputRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type isBTCSignInputRequest_Request interface{ isBTCSignInputRequest_Request() }

type BTCSignInputRequest_Input_ struct {
	Input *BTCSignInputRequest_Input `protobuf:"bytes,1,opt,name=input,oneof"`
}
type BTCSignInputRequest_Sign struct {
	Sign *SignRequest `protobuf:"bytes,2,opt,name=sign,oneof"`
}

func (*BTCSignInputRequest_Input_) isBTCSignInputRequest_Request() {}
func (*BTCSignInputRequest_Sign) isBTCSignInputRequest_Request()   {}

func (m *BTCSignInputRequest) GetRequest() isBTCSignInputRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *BTCSignInputRequest) GetInput() *BTCSignInputRequest_Input {
	if x, ok := m.GetRequest().(*BTCSignInputRequest_Input_); ok {
		return x.Input
	}
	return nil
}

func (m *BTCSignInputRequest) GetSign() *SignRequest {
	if x, ok := m.GetRequest().(*BTCSignInputRequest_Sign); ok {
		return x.Sign
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BTCSignInputRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BTCSignInputRequest_OneofMarshaler, _BTCSignInputRequest_OneofUnmarshaler, _BTCSignInputRequest_OneofSizer, []interface{}{
		(*BTCSignInputRequest_Input_)(nil),
		(*BTCSignInputRequest_Sign)(nil),
	}
}

func _BTCSignInputRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BTCSignInputRequest)
	// request
	switch x := m.Request.(type) {
	case *BTCSignInputRequest_Input_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Input); err != nil {
			return err
		}
	case *BTCSignInputRequest_Sign:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sign); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BTCSignInputRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _BTCSignInputRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BTCSignInputRequest)
	switch tag {
	case 1: // request.input
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BTCSignInputRequest_Input)
		err := b.DecodeMessage(msg)
		m.Request = &BTCSignInputRequest_Input_{msg}
		return true, err
	case 2: // request.sign
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BTCSignInputRequest_Sign{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BTCSignInputRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BTCSignInputRequest)
	// request
	switch x := m.Request.(type) {
	case *BTCSignInputRequest_Input_:
		s := proto.Size(x.Input)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BTCSignInputRequest_Sign:
		s := proto.Size(x.Sign)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BTCSignInputRequest_Input struct {
	PrevOutHash         []byte   `protobuf:"bytes,1,opt,name=prevOutHash,proto3" json:"prevOutHash,omitempty"`
	PrevOutIndex        uint32   `protobuf:"varint,2,opt,name=prevOutIndex" json:"prevOutIndex,omitempty"`
	PrevOutValue        uint64   `protobuf:"varint,3,opt,name=prevOutValue" json:"prevOutValue,omitempty"`
	Sequence            uint32   `protobuf:"varint,4,opt,name=sequence" json:"sequence,omitempty"`
	Keypath             []uint32 `protobuf:"varint,6,rep,packed,name=keypath" json:"keypath,omitempty"`
	HostNonceCommitment []byte   `protobuf:"bytes,7,opt,name=host_nonce_commitment,json=hostNonceCommitment,proto3" json:"host_nonce_commitment,omitempty"`
}

func (m *BTCSignInputRequest_Input) Reset()                    { *m = BTCSignInputRequest_Input{} }
func (m *BTCSignInputRequest_Input) String() string            { return proto.CompactTextString(m) }
func (*BTCSignInputRequest_Input) ProtoMessage()               {}
func (*BTCSignInputRequest_Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

func (m *BTCSignInputRequest_Input) GetPrevOutHash() []byte {
	if m != nil {
		return m.PrevOutHash
	}
	return nil
}

func (m *BTCSignInputRequest_Input) GetPrevOutIndex() uint32 {
	if m != nil {
		return m.PrevOutIndex
	}
	return 0
}

func (m *BTCSignInputRequest_Input) GetPrevOutValue() uint64 {
	if m != nil {
		return m.PrevOutValue
	}
	return 0
}

func (m *BTCSignInputRequest_Input) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *BTCSignInputRequest_Input) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func (m *BTCSignInputRequest_Input) GetHostNonceCommitment() []byte {
	if m != nil {
		return m.HostNonceCommitment
	}
	return nil
}

type BTCSignOutputRequest struct {
	Ours bool          `protobuf:"varint,1,opt,name=ours" json:"ours,omitempty"`
	Type BTCOutputType `protobuf:"varint,2,opt,name=type,enum=BTCOutputType" json:"type,omitempty"`
	// 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
	Value   uint64   `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	Hash    []byte   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Keypath []uint32 `protobuf:"varint,5,rep,packed,name=keypath" json:"keypath,omitempty"`
}

func (m *BTCSignOutputRequest) Reset()                    { *m = BTCSignOutputRequest{} }
func (m *BTCSignOutputRequest) String() string            { return proto.CompactTextString(m) }
func (*BTCSignOutputRequest) ProtoMessage()               {}
func (*BTCSignOutputRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BTCSignOutputRequest) GetOurs() bool {
	if m != nil {
		return m.Ours
	}
	return false
}

func (m *BTCSignOutputRequest) GetType() BTCOutputType {
	if m != nil {
		return m.Type
	}
	return BTCOutputType_UNKNOWN
}

func (m *BTCSignOutputRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *BTCSignOutputRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BTCSignOutputRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

type SetMnemonicPassphraseEnabledRequest struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *SetMnemonicPassphraseEnabledRequest) Reset()         { *m = SetMnemonicPassphraseEnabledRequest{} }
func (m *SetMnemonicPassphraseEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*SetMnemonicPassphraseEnabledRequest) ProtoMessage()    {}
func (*SetMnemonicPassphraseEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *SetMnemonicPassphraseEnabledRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Deprecated, last used in v1.0.0
type PerformAttestationRequest struct {
	// 32 bytes challenge.
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (m *PerformAttestationRequest) Reset()                    { *m = PerformAttestationRequest{} }
func (m *PerformAttestationRequest) String() string            { return proto.CompactTextString(m) }
func (*PerformAttestationRequest) ProtoMessage()               {}
func (*PerformAttestationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PerformAttestationRequest) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

// Deprecated, last used in v1.0.0
type PerformAttestationResponse struct {
	BootloaderHash       []byte `protobuf:"bytes,1,opt,name=bootloader_hash,json=bootloaderHash,proto3" json:"bootloader_hash,omitempty"`
	DevicePubkey         []byte `protobuf:"bytes,2,opt,name=device_pubkey,json=devicePubkey,proto3" json:"device_pubkey,omitempty"`
	Certificate          []byte `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	RootPubkeyIdentifier []byte `protobuf:"bytes,4,opt,name=root_pubkey_identifier,json=rootPubkeyIdentifier,proto3" json:"root_pubkey_identifier,omitempty"`
	ChallengeSignature   []byte `protobuf:"bytes,5,opt,name=challenge_signature,json=challengeSignature,proto3" json:"challenge_signature,omitempty"`
}

func (m *PerformAttestationResponse) Reset()                    { *m = PerformAttestationResponse{} }
func (m *PerformAttestationResponse) String() string            { return proto.CompactTextString(m) }
func (*PerformAttestationResponse) ProtoMessage()               {}
func (*PerformAttestationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PerformAttestationResponse) GetBootloaderHash() []byte {
	if m != nil {
		return m.BootloaderHash
	}
	return nil
}

func (m *PerformAttestationResponse) GetDevicePubkey() []byte {
	if m != nil {
		return m.DevicePubkey
	}
	return nil
}

func (m *PerformAttestationResponse) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *PerformAttestationResponse) GetRootPubkeyIdentifier() []byte {
	if m != nil {
		return m.RootPubkeyIdentifier
	}
	return nil
}

func (m *PerformAttestationResponse) GetChallengeSignature() []byte {
	if m != nil {
		return m.ChallengeSignature
	}
	return nil
}

type RebootRequest struct {
}

func (m *RebootRequest) Reset()                    { *m = RebootRequest{} }
func (m *RebootRequest) String() string            { return proto.CompactTextString(m) }
func (*RebootRequest) ProtoMessage()               {}
func (*RebootRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type ETHPubRequest struct {
	Keypath    []uint32                 `protobuf:"varint,1,rep,packed,name=keypath" json:"keypath,omitempty"`
	Coin       ETHCoin                  `protobuf:"varint,2,opt,name=coin,enum=ETHCoin" json:"coin,omitempty"`
	OutputType ETHPubRequest_OutputType `protobuf:"varint,3,opt,name=output_type,json=outputType,enum=ETHPubRequest_OutputType" json:"output_type,omitempty"`
	Display    bool                     `protobuf:"varint,4,opt,name=display" json:"display,omitempty"`
}

func (m *ETHPubRequest) Reset()                    { *m = ETHPubRequest{} }
func (m *ETHPubRequest) String() string            { return proto.CompactTextString(m) }
func (*ETHPubRequest) ProtoMessage()               {}
func (*ETHPubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ETHPubRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func (m *ETHPubRequest) GetCoin() ETHCoin {
	if m != nil {
		return m.Coin
	}
	return ETHCoin_ETH
}

func (m *ETHPubRequest) GetOutputType() ETHPubRequest_OutputType {
	if m != nil {
		return m.OutputType
	}
	return ETHPubRequest_ADDRESS
}

func (m *ETHPubRequest) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

type ETHSignRequest struct {
	Coin      ETHCoin  `protobuf:"varint,1,opt,name=coin,enum=ETHCoin" json:"coin,omitempty"`
	Keypath   []uint32 `protobuf:"varint,2,rep,packed,name=keypath" json:"keypath,omitempty"`
	Nonce     []byte   `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice  []byte   `protobuf:"bytes,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit  []byte   `protobuf:"bytes,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Recipient []byte   `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Value     []byte   `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Data      []byte   `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ETHSignRequest) Reset()                    { *m = ETHSignRequest{} }
func (m *ETHSignRequest) String() string            { return proto.CompactTextString(m) }
func (*ETHSignRequest) ProtoMessage()               {}
func (*ETHSignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ETHSignRequest) GetCoin() ETHCoin {
	if m != nil {
		return m.Coin
	}
	return ETHCoin_ETH
}

func (m *ETHSignRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func (m *ETHSignRequest) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *ETHSignRequest) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *ETHSignRequest) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *ETHSignRequest) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *ETHSignRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ETHSignRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ETHSignResponse struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ETHSignResponse) Reset()                    { *m = ETHSignResponse{} }
func (m *ETHSignResponse) String() string            { return proto.CompactTextString(m) }
func (*ETHSignResponse) ProtoMessage()               {}
func (*ETHSignResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ETHSignResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ETHRequest struct {
	// Types that are valid to be assigned to Request:
	//	*ETHRequest_Pub
	//	*ETHRequest_Sign
	Request isETHRequest_Request `protobuf_oneof:"request"`
}

func (m *ETHRequest) Reset()                    { *m = ETHRequest{} }
func (m *ETHRequest) String() string            { return proto.CompactTextString(m) }
func (*ETHRequest) ProtoMessage()               {}
func (*ETHRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type isETHRequest_Request interface{ isETHRequest_Request() }

type ETHRequest_Pub struct {
	Pub *ETHPubRequest `protobuf:"bytes,1,opt,name=pub,oneof"`
}
type ETHRequest_Sign struct {
	Sign *ETHSignRequest `protobuf:"bytes,2,opt,name=sign,oneof"`
}

func (*ETHRequest_Pub) isETHRequest_Request()  {}
func (*ETHRequest_Sign) isETHRequest_Request() {}

func (m *ETHRequest) GetRequest() isETHRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ETHRequest) GetPub() *ETHPubRequest {
	if x, ok := m.GetRequest().(*ETHRequest_Pub); ok {
		return x.Pub
	}
	return nil
}

func (m *ETHRequest) GetSign() *ETHSignRequest {
	if x, ok := m.GetRequest().(*ETHRequest_Sign); ok {
		return x.Sign
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ETHRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ETHRequest_OneofMarshaler, _ETHRequest_OneofUnmarshaler, _ETHRequest_OneofSizer, []interface{}{
		(*ETHRequest_Pub)(nil),
		(*ETHRequest_Sign)(nil),
	}
}

func _ETHRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ETHRequest)
	// request
	switch x := m.Request.(type) {
	case *ETHRequest_Pub:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pub); err != nil {
			return err
		}
	case *ETHRequest_Sign:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sign); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ETHRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _ETHRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ETHRequest)
	switch tag {
	case 1: // request.pub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ETHPubRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ETHRequest_Pub{msg}
		return true, err
	case 2: // request.sign
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ETHSignRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ETHRequest_Sign{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ETHRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ETHRequest)
	// request
	switch x := m.Request.(type) {
	case *ETHRequest_Pub:
		s := proto.Size(x.Pub)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ETHRequest_Sign:
		s := proto.Size(x.Sign)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ETHResponse struct {
	// Types that are valid to be assigned to Response:
	//	*ETHResponse_Pub
	//	*ETHResponse_Sign
	Response isETHResponse_Response `protobuf_oneof:"response"`
}

func (m *ETHResponse) Reset()                    { *m = ETHResponse{} }
func (m *ETHResponse) String() string            { return proto.CompactTextString(m) }
func (*ETHResponse) ProtoMessage()               {}
func (*ETHResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type isETHResponse_Response interface{ isETHResponse_Response() }

type ETHResponse_Pub struct {
	Pub *PubResponse `protobuf:"bytes,1,opt,name=pub,oneof"`
}
type ETHResponse_Sign struct {
	Sign *ETHSignResponse `protobuf:"bytes,2,opt,name=sign,oneof"`
}

func (*ETHResponse_Pub) isETHResponse_Response()  {}
func (*ETHResponse_Sign) isETHResponse_Response() {}

func (m *ETHResponse) GetResponse() isETHResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ETHResponse) GetPub() *PubResponse {
	if x, ok := m.GetResponse().(*ETHResponse_Pub); ok {
		return x.Pub
	}
	return nil
}

func (m *ETHResponse) GetSign() *ETHSignResponse {
	if x, ok := m.GetResponse().(*ETHResponse_Sign); ok {
		return x.Sign
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ETHResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ETHResponse_OneofMarshaler, _ETHResponse_OneofUnmarshaler, _ETHResponse_OneofSizer, []interface{}{
		(*ETHResponse_Pub)(nil),
		(*ETHResponse_Sign)(nil),
	}
}

func _ETHResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ETHResponse)
	// response
	switch x := m.Response.(type) {
	case *ETHResponse_Pub:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pub); err != nil {
			return err
		}
	case *ETHResponse_Sign:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sign); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ETHResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _ETHResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ETHResponse)
	switch tag {
	case 1: // response.pub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PubResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ETHResponse_Pub{msg}
		return true, err
	case 2: // response.sign
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ETHSignResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ETHResponse_Sign{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ETHResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ETHResponse)
	// response
	switch x := m.Response.(type) {
	case *ETHResponse_Pub:
		s := proto.Size(x.Pub)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ETHResponse_Sign:
		s := proto.Size(x.Sign)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SignRequest struct {
	HostNonce []byte `protobuf:"bytes,1,opt,name=host_nonce,json=hostNonce,proto3" json:"host_nonce,omitempty"`
}

func (m *SignRequest) Reset()                    { *m = SignRequest{} }
func (m *SignRequest) String() string            { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()               {}
func (*SignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *SignRequest) GetHostNonce() []byte {
	if m != nil {
		return m.HostNonce
	}
	return nil
}

type Request struct {
	// Types that are valid to be assigned to Request:
	//	*Request_RandomNumber
	//	*Request_DeviceName
	//	*Request_DeviceLanguage
	//	*Request_DeviceInfo
	//	*Request_SetPassword
	//	*Request_CreateBackup
	//	*Request_ShowMnemonic
	//	*Request_BtcPub
	//	*Request_BtcSignInit
	//	*Request_BtcSignInput
	//	*Request_BtcSignOutput
	//	*Request_InsertRemoveSdcard
	//	*Request_CheckSdcard
	//	*Request_SetMnemonicPassphraseEnabled
	//	*Request_ListBackups
	//	*Request_RestoreBackup
	//	*Request_PerformAttestation
	//	*Request_Reboot
	//	*Request_CheckBackup
	//	*Request_Eth
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type isRequest_Request interface{ isRequest_Request() }

type Request_RandomNumber struct {
	RandomNumber *RandomNumberRequest `protobuf:"bytes,1,opt,name=random_number,json=randomNumber,oneof"`
}
type Request_DeviceName struct {
	DeviceName *SetDeviceNameRequest `protobuf:"bytes,2,opt,name=device_name,json=deviceName,oneof"`
}
type Request_DeviceLanguage struct {
	DeviceLanguage *SetDeviceLanguageRequest `protobuf:"bytes,3,opt,name=device_language,json=deviceLanguage,oneof"`
}
type Request_DeviceInfo struct {
	DeviceInfo *DeviceInfoRequest `protobuf:"bytes,4,opt,name=device_info,json=deviceInfo,oneof"`
}
type Request_SetPassword struct {
	SetPassword *SetPasswordRequest `protobuf:"bytes,5,opt,name=set_password,json=setPassword,oneof"`
}
type Request_CreateBackup struct {
	CreateBackup *CreateBackupRequest `protobuf:"bytes,6,opt,name=create_backup,json=createBackup,oneof"`
}
type Request_ShowMnemonic struct {
	ShowMnemonic *ShowMnemonicRequest `protobuf:"bytes,7,opt,name=show_mnemonic,json=showMnemonic,oneof"`
}
type Request_BtcPub struct {
	BtcPub *BTCPubRequest `protobuf:"bytes,8,opt,name=btc_pub,json=btcPub,oneof"`
}
type Request_BtcSignInit struct {
	BtcSignInit *BTCSignInitRequest `protobuf:"bytes,9,opt,name=btc_sign_init,json=btcSignInit,oneof"`
}
type Request_BtcSignInput struct {
	BtcSignInput *BTCSignInputRequest `protobuf:"bytes,10,opt,name=btc_sign_input,json=btcSignInput,oneof"`
}
type Request_BtcSignOutput struct {
	BtcSignOutput *BTCSignOutputRequest `protobuf:"bytes,11,opt,name=btc_sign_output,json=btcSignOutput,oneof"`
}
type Request_InsertRemoveSdcard struct {
	InsertRemoveSdcard *InsertRemoveSDCardRequest `protobuf:"bytes,12,opt,name=insert_remove_sdcard,json=insertRemoveSdcard,oneof"`
}
type Request_CheckSdcard struct {
	CheckSdcard *CheckSDCardRequest `protobuf:"bytes,13,opt,name=check_sdcard,json=checkSdcard,oneof"`
}
type Request_SetMnemonicPassphraseEnabled struct {
	SetMnemonicPassphraseEnabled *SetMnemonicPassphraseEnabledRequest `protobuf:"bytes,14,opt,name=set_mnemonic_passphrase_enabled,json=setMnemonicPassphraseEnabled,oneof"`
}
type Request_ListBackups struct {
	ListBackups *ListBackupsRequest `protobuf:"bytes,15,opt,name=list_backups,json=listBackups,oneof"`
}
type Request_RestoreBackup struct {
	RestoreBackup *RestoreBackupRequest `protobuf:"bytes,16,opt,name=restore_backup,json=restoreBackup,oneof"`
}
type Request_PerformAttestation struct {
	PerformAttestation *PerformAttestationRequest `protobuf:"bytes,17,opt,name=perform_attestation,json=performAttestation,oneof"`
}
type Request_Reboot struct {
	Reboot *RebootRequest `protobuf:"bytes,18,opt,name=reboot,oneof"`
}
type Request_CheckBackup struct {
	CheckBackup *CheckBackupRequest `protobuf:"bytes,19,opt,name=check_backup,json=checkBackup,oneof"`
}
type Request_Eth struct {
	Eth *ETHRequest `protobuf:"bytes,20,opt,name=eth,oneof"`
}

func (*Request_RandomNumber) isRequest_Request()                 {}
func (*Request_DeviceName) isRequest_Request()                   {}
func (*Request_DeviceLanguage) isRequest_Request()               {}
func (*Request_DeviceInfo) isRequest_Request()                   {}
func (*Request_SetPassword) isRequest_Request()                  {}
func (*Request_CreateBackup) isRequest_Request()                 {}
func (*Request_ShowMnemonic) isRequest_Request()                 {}
func (*Request_BtcPub) isRequest_Request()                       {}
func (*Request_BtcSignInit) isRequest_Request()                  {}
func (*Request_BtcSignInput) isRequest_Request()                 {}
func (*Request_BtcSignOutput) isRequest_Request()                {}
func (*Request_InsertRemoveSdcard) isRequest_Request()           {}
func (*Request_CheckSdcard) isRequest_Request()                  {}
func (*Request_SetMnemonicPassphraseEnabled) isRequest_Request() {}
func (*Request_ListBackups) isRequest_Request()                  {}
func (*Request_RestoreBackup) isRequest_Request()                {}
func (*Request_PerformAttestation) isRequest_Request()           {}
func (*Request_Reboot) isRequest_Request()                       {}
func (*Request_CheckBackup) isRequest_Request()                  {}
func (*Request_Eth) isRequest_Request()                          {}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Request) GetRandomNumber() *RandomNumberRequest {
	if x, ok := m.GetRequest().(*Request_RandomNumber); ok {
		return x.RandomNumber
	}
	return nil
}

func (m *Request) GetDeviceName() *SetDeviceNameRequest {
	if x, ok := m.GetRequest().(*Request_DeviceName); ok {
		return x.DeviceName
	}
	return nil
}

func (m *Request) GetDeviceLanguage() *SetDeviceLanguageRequest {
	if x, ok := m.GetRequest().(*Request_DeviceLanguage); ok {
		return x.DeviceLanguage
	}
	return nil
}

func (m *Request) GetDeviceInfo() *DeviceInfoRequest {
	if x, ok := m.GetRequest().(*Request_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

func (m *Request) GetSetPassword() *SetPasswordRequest {
	if x, ok := m.GetRequest().(*Request_SetPassword); ok {
		return x.SetPassword
	}
	return nil
}

func (m *Request) GetCreateBackup() *CreateBackupRequest {
	if x, ok := m.GetRequest().(*Request_CreateBackup); ok {
		return x.CreateBackup
	}
	return nil
}

func (m *Request) GetShowMnemonic() *ShowMnemonicRequest {
	if x, ok := m.GetRequest().(*Request_ShowMnemonic); ok {
		return x.ShowMnemonic
	}
	return nil
}

func (m *Request) GetBtcPub() *BTCPubRequest {
	if x, ok := m.GetRequest().(*Request_BtcPub); ok {
		return x.BtcPub
	}
	return nil
}

func (m *Request) GetBtcSignInit() *BTCSignInitRequest {
	if x, ok := m.GetRequest().(*Request_BtcSignInit); ok {
		return x.BtcSignInit
	}
	return nil
}

func (m *Request) GetBtcSignInput() *BTCSignInputRequest {
	if x, ok := m.GetRequest().(*Request_BtcSignInput); ok {
		return x.BtcSignInput
	}
	return nil
}

func (m *Request) GetBtcSignOutput() *BTCSignOutputRequest {
	if x, ok := m.GetRequest().(*Request_BtcSignOutput); ok {
		return x.BtcSignOutput
	}
	return nil
}

func (m *Request) GetInsertRemoveSdcard() *InsertRemoveSDCardRequest {
	if x, ok := m.GetRequest().(*Request_InsertRemoveSdcard); ok {
		return x.InsertRemoveSdcard
	}
	return nil
}

func (m *Request) GetCheckSdcard() *CheckSDCardRequest {
	if x, ok := m.GetRequest().(*Request_CheckSdcard); ok {
		return x.CheckSdcard
	}
	return nil
}

func (m *Request) GetSetMnemonicPassphraseEnabled() *SetMnemonicPassphraseEnabledRequest {
	if x, ok := m.GetRequest().(*Request_SetMnemonicPassphraseEnabled); ok {
		return x.SetMnemonicPassphraseEnabled
	}
	return nil
}

func (m *Request) GetListBackups() *ListBackupsRequest {
	if x, ok := m.GetRequest().(*Request_ListBackups); ok {
		return x.ListBackups
	}
	return nil
}

func (m *Request) GetRestoreBackup() *RestoreBackupRequest {
	if x, ok := m.GetRequest().(*Request_RestoreBackup); ok {
		return x.RestoreBackup
	}
	return nil
}

func (m *Request) GetPerformAttestation() *PerformAttestationRequest {
	if x, ok := m.GetRequest().(*Request_PerformAttestation); ok {
		return x.PerformAttestation
	}
	return nil
}

func (m *Request) GetReboot() *RebootRequest {
	if x, ok := m.GetRequest().(*Request_Reboot); ok {
		return x.Reboot
	}
	return nil
}

func (m *Request) GetCheckBackup() *CheckBackupRequest {
	if x, ok := m.GetRequest().(*Request_CheckBackup); ok {
		return x.CheckBackup
	}
	return nil
}

func (m *Request) GetEth() *ETHRequest {
	if x, ok := m.GetRequest().(*Request_Eth); ok {
		return x.Eth
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_RandomNumber)(nil),
		(*Request_DeviceName)(nil),
		(*Request_DeviceLanguage)(nil),
		(*Request_DeviceInfo)(nil),
		(*Request_SetPassword)(nil),
		(*Request_CreateBackup)(nil),
		(*Request_ShowMnemonic)(nil),
		(*Request_BtcPub)(nil),
		(*Request_BtcSignInit)(nil),
		(*Request_BtcSignInput)(nil),
		(*Request_BtcSignOutput)(nil),
		(*Request_InsertRemoveSdcard)(nil),
		(*Request_CheckSdcard)(nil),
		(*Request_SetMnemonicPassphraseEnabled)(nil),
		(*Request_ListBackups)(nil),
		(*Request_RestoreBackup)(nil),
		(*Request_PerformAttestation)(nil),
		(*Request_Reboot)(nil),
		(*Request_CheckBackup)(nil),
		(*Request_Eth)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_RandomNumber:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RandomNumber); err != nil {
			return err
		}
	case *Request_DeviceName:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceName); err != nil {
			return err
		}
	case *Request_DeviceLanguage:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceLanguage); err != nil {
			return err
		}
	case *Request_DeviceInfo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceInfo); err != nil {
			return err
		}
	case *Request_SetPassword:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetPassword); err != nil {
			return err
		}
	case *Request_CreateBackup:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateBackup); err != nil {
			return err
		}
	case *Request_ShowMnemonic:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ShowMnemonic); err != nil {
			return err
		}
	case *Request_BtcPub:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BtcPub); err != nil {
			return err
		}
	case *Request_BtcSignInit:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BtcSignInit); err != nil {
			return err
		}
	case *Request_BtcSignInput:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BtcSignInput); err != nil {
			return err
		}
	case *Request_BtcSignOutput:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BtcSignOutput); err != nil {
			return err
		}
	case *Request_InsertRemoveSdcard:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsertRemoveSdcard); err != nil {
			return err
		}
	case *Request_CheckSdcard:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckSdcard); err != nil {
			return err
		}
	case *Request_SetMnemonicPassphraseEnabled:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetMnemonicPassphraseEnabled); err != nil {
			return err
		}
	case *Request_ListBackups:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListBackups); err != nil {
			return err
		}
	case *Request_RestoreBackup:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RestoreBackup); err != nil {
			return err
		}
	case *Request_PerformAttestation:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PerformAttestation); err != nil {
			return err
		}
	case *Request_Reboot:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reboot); err != nil {
			return err
		}
	case *Request_CheckBackup:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckBackup); err != nil {
			return err
		}
	case *Request_Eth:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Eth); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Request has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // request.random_number
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RandomNumberRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_RandomNumber{msg}
		return true, err
	case 2: // request.device_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetDeviceNameRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_DeviceName{msg}
		return true, err
	case 3: // request.device_language
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetDeviceLanguageRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_DeviceLanguage{msg}
		return true, err
	case 4: // request.device_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceInfoRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_DeviceInfo{msg}
		return true, err
	case 5: // request.set_password
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetPasswordRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_SetPassword{msg}
		return true, err
	case 6: // request.create_backup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateBackupRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_CreateBackup{msg}
		return true, err
	case 7: // request.show_mnemonic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ShowMnemonicRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_ShowMnemonic{msg}
		return true, err
	case 8: // request.btc_pub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BTCPubRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_BtcPub{msg}
		return true, err
	case 9: // request.btc_sign_init
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BTCSignInitRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_BtcSignInit{msg}
		return true, err
	case 10: // request.btc_sign_input
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BTCSignInputRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_BtcSignInput{msg}
		return true, err
	case 11: // request.btc_sign_output
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BTCSignOutputRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_BtcSignOutput{msg}
		return true, err
	case 12: // request.insert_remove_sdcard
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InsertRemoveSDCardRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_InsertRemoveSdcard{msg}
		return true, err
	case 13: // request.check_sdcard
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CheckSDCardRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_CheckSdcard{msg}
		return true, err
	case 14: // request.set_mnemonic_passphrase_enabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetMnemonicPassphraseEnabledRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_SetMnemonicPassphraseEnabled{msg}
		return true, err
	case 15: // request.list_backups
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListBackupsRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_ListBackups{msg}
		return true, err
	case 16: // request.restore_backup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RestoreBackupRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_RestoreBackup{msg}
		return true, err
	case 17: // request.perform_attestation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerformAttestationRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_PerformAttestation{msg}
		return true, err
	case 18: // request.reboot
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RebootRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Reboot{msg}
		return true, err
	case 19: // request.check_backup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CheckBackupRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_CheckBackup{msg}
		return true, err
	case 20: // request.eth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ETHRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Eth{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_RandomNumber:
		s := proto.Size(x.RandomNumber)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_DeviceName:
		s := proto.Size(x.DeviceName)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_DeviceLanguage:
		s := proto.Size(x.DeviceLanguage)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_DeviceInfo:
		s := proto.Size(x.DeviceInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SetPassword:
		s := proto.Size(x.SetPassword)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_CreateBackup:
		s := proto.Size(x.CreateBackup)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ShowMnemonic:
		s := proto.Size(x.ShowMnemonic)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BtcPub:
		s := proto.Size(x.BtcPub)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BtcSignInit:
		s := proto.Size(x.BtcSignInit)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BtcSignInput:
		s := proto.Size(x.BtcSignInput)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BtcSignOutput:
		s := proto.Size(x.BtcSignOutput)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_InsertRemoveSdcard:
		s := proto.Size(x.InsertRemoveSdcard)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_CheckSdcard:
		s := proto.Size(x.CheckSdcard)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SetMnemonicPassphraseEnabled:
		s := proto.Size(x.SetMnemonicPassphraseEnabled)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ListBackups:
		s := proto.Size(x.ListBackups)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_RestoreBackup:
		s := proto.Size(x.RestoreBackup)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_PerformAttestation:
		s := proto.Size(x.PerformAttestation)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Reboot:
		s := proto.Size(x.Reboot)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_CheckBackup:
		s := proto.Size(x.CheckBackup)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Eth:
		s := proto.Size(x.Eth)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Response struct {
	// Types that are valid to be assigned to Response:
	//	*Response_Success
	//	*Response_Error
	//	*Response_RandomNumber
	//	*Response_DeviceInfo
	//	*Response_Pub
	//	*Response_BtcSignNext
	//	*Response_ListBackups
	//	*Response_CheckBackup
	//	*Response_PerformAttestation
	//	*Response_CheckSdcard
	//	*Response_Eth
	Response isResponse_Response `protobuf_oneof:"response"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

type isResponse_Response interface{ isResponse_Response() }

type Response_Success struct {
	Success *Success `protobuf:"bytes,1,opt,name=success,oneof"`
}
type Response_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,oneof"`
}
type Response_RandomNumber struct {
	RandomNumber *RandomNumberResponse `protobuf:"bytes,3,opt,name=random_number,json=randomNumber,oneof"`
}
type Response_DeviceInfo struct {
	DeviceInfo *DeviceInfoResponse `protobuf:"bytes,4,opt,name=device_info,json=deviceInfo,oneof"`
}
type Response_Pub struct {
	Pub *PubResponse `protobuf:"bytes,5,opt,name=pub,oneof"`
}
type Response_BtcSignNext struct {
	BtcSignNext *BTCSignNextResponse `protobuf:"bytes,6,opt,name=btc_sign_next,json=btcSignNext,oneof"`
}
type Response_ListBackups struct {
	ListBackups *ListBackupsResponse `protobuf:"bytes,7,opt,name=list_backups,json=listBackups,oneof"`
}
type Response_CheckBackup struct {
	CheckBackup *CheckBackupResponse `protobuf:"bytes,8,opt,name=check_backup,json=checkBackup,oneof"`
}
type Response_PerformAttestation struct {
	PerformAttestation *PerformAttestationResponse `protobuf:"bytes,9,opt,name=perform_attestation,json=performAttestation,oneof"`
}
type Response_CheckSdcard struct {
	CheckSdcard *CheckSDCardResponse `protobuf:"bytes,10,opt,name=check_sdcard,json=checkSdcard,oneof"`
}
type Response_Eth struct {
	Eth *ETHResponse `protobuf:"bytes,11,opt,name=eth,oneof"`
}

func (*Response_Success) isResponse_Response()            {}
func (*Response_Error) isResponse_Response()              {}
func (*Response_RandomNumber) isResponse_Response()       {}
func (*Response_DeviceInfo) isResponse_Response()         {}
func (*Response_Pub) isResponse_Response()                {}
func (*Response_BtcSignNext) isResponse_Response()        {}
func (*Response_ListBackups) isResponse_Response()        {}
func (*Response_CheckBackup) isResponse_Response()        {}
func (*Response_PerformAttestation) isResponse_Response() {}
func (*Response_CheckSdcard) isResponse_Response()        {}
func (*Response_Eth) isResponse_Response()                {}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Response) GetSuccess() *Success {
	if x, ok := m.GetResponse().(*Response_Success); ok {
		return x.Success
	}
	return nil
}

func (m *Response) GetError() *Error {
	if x, ok := m.GetResponse().(*Response_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Response) GetRandomNumber() *RandomNumberResponse {
	if x, ok := m.GetResponse().(*Response_RandomNumber); ok {
		return x.RandomNumber
	}
	return nil
}

func (m *Response) GetDeviceInfo() *DeviceInfoResponse {
	if x, ok := m.GetResponse().(*Response_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

func (m *Response) GetPub() *PubResponse {
	if x, ok := m.GetResponse().(*Response_Pub); ok {
		return x.Pub
	}
	return nil
}

func (m *Response) GetBtcSignNext() *BTCSignNextResponse {
	if x, ok := m.GetResponse().(*Response_BtcSignNext); ok {
		return x.BtcSignNext
	}
	return nil
}

func (m *Response) GetListBackups() *ListBackupsResponse {
	if x, ok := m.GetResponse().(*Response_ListBackups); ok {
		return x.ListBackups
	}
	return nil
}

func (m *Response) GetCheckBackup() *CheckBackupResponse {
	if x, ok := m.GetResponse().(*Response_CheckBackup); ok {
		return x.CheckBackup
	}
	return nil
}

func (m *Response) GetPerformAttestation() *PerformAttestationResponse {
	if x, ok := m.GetResponse().(*Response_PerformAttestation); ok {
		return x.PerformAttestation
	}
	return nil
}

func (m *Response) GetCheckSdcard() *CheckSDCardResponse {
	if x, ok := m.GetResponse().(*Response_CheckSdcard); ok {
		return x.CheckSdcard
	}
	return nil
}

func (m *Response) GetEth() *ETHResponse {
	if x, ok := m.GetResponse().(*Response_Eth); ok {
		return x.Eth
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_Success)(nil),
		(*Response_Error)(nil),
		(*Response_RandomNumber)(nil),
		(*Response_DeviceInfo)(nil),
		(*Response_Pub)(nil),
		(*Response_BtcSignNext)(nil),
		(*Response_ListBackups)(nil),
		(*Response_CheckBackup)(nil),
		(*Response_PerformAttestation)(nil),
		(*Response_CheckSdcard)(nil),
		(*Response_Eth)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_Success:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case *Response_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Response_RandomNumber:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RandomNumber); err != nil {
			return err
		}
	case *Response_DeviceInfo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceInfo); err != nil {
			return err
		}
	case *Response_Pub:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pub); err != nil {
			return err
		}
	case *Response_BtcSignNext:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BtcSignNext); err != nil {
			return err
		}
	case *Response_ListBackups:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListBackups); err != nil {
			return err
		}
	case *Response_CheckBackup:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckBackup); err != nil {
			return err
		}
	case *Response_PerformAttestation:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PerformAttestation); err != nil {
			return err
		}
	case *Response_CheckSdcard:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckSdcard); err != nil {
			return err
		}
	case *Response_Eth:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Eth); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Response has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // response.success
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Success)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Success{msg}
		return true, err
	case 2: // response.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Error{msg}
		return true, err
	case 3: // response.random_number
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RandomNumberResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_RandomNumber{msg}
		return true, err
	case 4: // response.device_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceInfoResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_DeviceInfo{msg}
		return true, err
	case 5: // response.pub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PubResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Pub{msg}
		return true, err
	case 6: // response.btc_sign_next
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BTCSignNextResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_BtcSignNext{msg}
		return true, err
	case 7: // response.list_backups
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListBackupsResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_ListBackups{msg}
		return true, err
	case 8: // response.check_backup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CheckBackupResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_CheckBackup{msg}
		return true, err
	case 9: // response.perform_attestation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerformAttestationResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_PerformAttestation{msg}
		return true, err
	case 10: // response.check_sdcard
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CheckSDCardResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_CheckSdcard{msg}
		return true, err
	case 11: // response.eth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ETHResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Eth{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_Success:
		s := proto.Size(x.Success)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_RandomNumber:
		s := proto.Size(x.RandomNumber)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_DeviceInfo:
		s := proto.Size(x.DeviceInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Pub:
		s := proto.Size(x.Pub)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BtcSignNext:
		s := proto.Size(x.BtcSignNext)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ListBackups:
		s := proto.Size(x.ListBackups)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_CheckBackup:
		s := proto.Size(x.CheckBackup)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_PerformAttestation:
		s := proto.Size(x.PerformAttestation)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_CheckSdcard:
		s := proto.Size(x.CheckSdcard)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Eth:
		s := proto.Size(x.Eth)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Error)(nil), "Error")
	proto.RegisterType((*Success)(nil), "Success")
	proto.RegisterType((*RandomNumberResponse)(nil), "RandomNumberResponse")
	proto.RegisterType((*RandomNumberRequest)(nil), "RandomNumberRequest")
	proto.RegisterType((*DeviceInfoRequest)(nil), "DeviceInfoRequest")
	proto.RegisterType((*DeviceInfoResponse)(nil), "DeviceInfoResponse")
	proto.RegisterType((*SetDeviceNameRequest)(nil), "SetDeviceNameRequest")
	proto.RegisterType((*SetDeviceLanguageRequest)(nil), "SetDeviceLanguageRequest")
	proto.RegisterType((*SetPasswordRequest)(nil), "SetPasswordRequest")
	proto.RegisterType((*CreateBackupRequest)(nil), "CreateBackupRequest")
	proto.RegisterType((*RestoreBackupRequest)(nil), "RestoreBackupRequest")
	proto.RegisterType((*ListBackupsRequest)(nil), "ListBackupsRequest")
	proto.RegisterType((*CheckBackupRequest)(nil), "CheckBackupRequest")
	proto.RegisterType((*CheckBackupResponse)(nil), "CheckBackupResponse")
	proto.RegisterType((*ShowMnemonicRequest)(nil), "ShowMnemonicRequest")
	proto.RegisterType((*InsertRemoveSDCardRequest)(nil), "InsertRemoveSDCardRequest")
	proto.RegisterType((*CheckSDCardRequest)(nil), "CheckSDCardRequest")
	proto.RegisterType((*CheckSDCardResponse)(nil), "CheckSDCardResponse")
	proto.RegisterType((*BTCPubRequest)(nil), "BTCPubRequest")
	proto.RegisterType((*PubResponse)(nil), "PubResponse")
	proto.RegisterType((*BackupInfo)(nil), "BackupInfo")
	proto.RegisterType((*ListBackupsResponse)(nil), "ListBackupsResponse")
	proto.RegisterType((*BTCSignInitRequest)(nil), "BTCSignInitRequest")
	proto.RegisterType((*BTCSignNextResponse)(nil), "BTCSignNextResponse")
	proto.RegisterType((*BTCSignInputRequest)(nil), "BTCSignInputRequest")
	proto.RegisterType((*BTCSignInputRequest_Input)(nil), "BTCSignInputRequest.Input")
	proto.RegisterType((*BTCSignOutputRequest)(nil), "BTCSignOutputRequest")
	proto.RegisterType((*SetMnemonicPassphraseEnabledRequest)(nil), "SetMnemonicPassphraseEnabledRequest")
	proto.RegisterType((*PerformAttestationRequest)(nil), "PerformAttestationRequest")
	proto.RegisterType((*PerformAttestationResponse)(nil), "PerformAttestationResponse")
	proto.RegisterType((*RebootRequest)(nil), "RebootRequest")
	proto.RegisterType((*ETHPubRequest)(nil), "ETHPubRequest")
	proto.RegisterType((*ETHSignRequest)(nil), "ETHSignRequest")
	proto.RegisterType((*ETHSignResponse)(nil), "ETHSignResponse")
	proto.RegisterType((*ETHRequest)(nil), "ETHRequest")
	proto.RegisterType((*ETHResponse)(nil), "ETHResponse")
	proto.RegisterType((*SignRequest)(nil), "SignRequest")
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterEnum("BTCCoin", BTCCoin_name, BTCCoin_value)
	proto.RegisterEnum("BTCScriptType", BTCScriptType_name, BTCScriptType_value)
	proto.RegisterEnum("BTCOutputType", BTCOutputType_name, BTCOutputType_value)
	proto.RegisterEnum("ETHCoin", ETHCoin_name, ETHCoin_value)
	proto.RegisterEnum("InsertRemoveSDCardRequest_SDCardAction", InsertRemoveSDCardRequest_SDCardAction_name, InsertRemoveSDCardRequest_SDCardAction_value)
	proto.RegisterEnum("BTCPubRequest_OutputType", BTCPubRequest_OutputType_name, BTCPubRequest_OutputType_value)
	proto.RegisterEnum("BTCSignNextResponse_Type", BTCSignNextResponse_Type_name, BTCSignNextResponse_Type_value)
	proto.RegisterEnum("ETHPubRequest_OutputType", ETHPubRequest_OutputType_name, ETHPubRequest_OutputType_value)
}

func init() { proto.RegisterFile("messages/hww.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x18, 0x4b, 0x6f, 0x1b, 0xc7,
	0x99, 0xef, 0xc7, 0xb7, 0x24, 0x45, 0x0f, 0x69, 0x83, 0x7e, 0x24, 0x16, 0xd6, 0x49, 0xec, 0x1a,
	0xe9, 0xba, 0x61, 0x9d, 0x20, 0x4e, 0x83, 0x18, 0x12, 0x45, 0x74, 0x09, 0x5b, 0x14, 0x31, 0xa4,
	0xe2, 0xbe, 0x80, 0xed, 0x72, 0x39, 0x12, 0x17, 0x22, 0x77, 0xb7, 0x3b, 0x43, 0xc9, 0xca, 0x8f,
	0x28, 0xd0, 0xfe, 0xa4, 0x5e, 0x7b, 0x2c, 0xd0, 0x4b, 0x2f, 0x3d, 0x16, 0xbd, 0xf6, 0x5e, 0x14,
	0xf3, 0xd8, 0x17, 0x45, 0x05, 0xee, 0x6d, 0xbe, 0xd7, 0xec, 0xf7, 0xfe, 0xe6, 0x5b, 0x40, 0x6b,
	0x42, 0xa9, 0x7d, 0x4e, 0xe8, 0x8b, 0xe5, 0xd5, 0x95, 0x11, 0x84, 0x3e, 0xf3, 0xf5, 0x2f, 0xa1,
	0x3c, 0x0c, 0x43, 0x3f, 0x44, 0x08, 0x4a, 0x8e, 0xbf, 0x20, 0xbd, 0xfc, 0x7e, 0xfe, 0x59, 0x19,
	0x8b, 0x33, 0xea, 0x41, 0x55, 0x89, 0xf4, 0x0a, 0xfb, 0xf9, 0x67, 0x75, 0x1c, 0x81, 0x7a, 0x1d,
	0xaa, 0xd3, 0x8d, 0xe3, 0x10, 0x4a, 0x75, 0x03, 0xba, 0xd8, 0xf6, 0x16, 0xfe, 0x7a, 0xbc, 0x59,
	0xcf, 0x49, 0x88, 0x09, 0x0d, 0x7c, 0x8f, 0x12, 0x74, 0x0f, 0x2a, 0x9e, 0xc0, 0x88, 0x2b, 0x1b,
	0x58, 0x41, 0xfa, 0x5d, 0xe8, 0x64, 0xf9, 0xff, 0xb0, 0x21, 0x94, 0xe9, 0x1d, 0xb8, 0x73, 0x44,
	0x2e, 0x5d, 0x87, 0x8c, 0xbc, 0x33, 0x3f, 0x42, 0xfe, 0x3b, 0x0f, 0x28, 0x8d, 0x55, 0x57, 0x23,
	0x28, 0x79, 0xf6, 0x5a, 0xea, 0x5a, 0xc7, 0xe2, 0x8c, 0xf6, 0x41, 0x73, 0x3d, 0x97, 0xb9, 0xf6,
	0xca, 0xfd, 0x81, 0x2c, 0x84, 0xbe, 0x35, 0x9c, 0x46, 0x71, 0x6b, 0x2e, 0x49, 0x48, 0x5d, 0xdf,
	0xeb, 0x15, 0xa5, 0x35, 0x0a, 0x44, 0xdf, 0xc1, 0xc3, 0xb5, 0x47, 0xd6, 0xbe, 0xe7, 0x3a, 0x56,
	0x60, 0x53, 0x1a, 0x2c, 0x43, 0x9b, 0x12, 0x8b, 0x78, 0xf6, 0x7c, 0x45, 0x16, 0xbd, 0x92, 0xb8,
	0xeb, 0x7e, 0xc4, 0x32, 0x89, 0x39, 0x86, 0x92, 0x01, 0x1d, 0xc1, 0xc7, 0x6b, 0xdf, 0xf3, 0x99,
	0xb8, 0xc0, 0xf5, 0x9c, 0x90, 0xac, 0x89, 0xc7, 0xa8, 0x15, 0x92, 0xb5, 0xed, 0x7a, 0xae, 0x77,
	0xde, 0x2b, 0xef, 0xe7, 0x9f, 0x35, 0xf1, 0xa3, 0x98, 0x6b, 0x14, 0x33, 0xe1, 0x88, 0x47, 0x7f,
	0x0e, 0xdd, 0x29, 0x61, 0xd2, 0xdc, 0xb1, 0xbd, 0x26, 0xca, 0x09, 0xbb, 0xac, 0xd5, 0xbf, 0x82,
	0x5e, 0xcc, 0xfb, 0xd6, 0xf6, 0xce, 0x37, 0xf6, 0x79, 0xcc, 0xff, 0x00, 0x6a, 0x2b, 0x85, 0x52,
	0x32, 0x31, 0xac, 0x1b, 0x80, 0xa6, 0x84, 0x71, 0x0b, 0xae, 0xfc, 0x70, 0x11, 0x49, 0xf4, 0xa0,
	0x4a, 0x3c, 0x16, 0xfa, 0xc1, 0xb5, 0x8a, 0x55, 0x04, 0xea, 0xbf, 0x83, 0xce, 0x20, 0x24, 0x36,
	0x23, 0x87, 0xb6, 0x73, 0xb1, 0x09, 0x22, 0x81, 0x47, 0x50, 0x67, 0xee, 0x9a, 0x50, 0x66, 0xaf,
	0x03, 0x21, 0xd2, 0xc4, 0x09, 0x02, 0x3d, 0x85, 0x3d, 0x0e, 0xfc, 0xe0, 0x7b, 0xc4, 0xf2, 0xcf,
	0xce, 0x28, 0x61, 0x22, 0x1c, 0x65, 0xdc, 0x8a, 0xd0, 0x27, 0x02, 0xab, 0x7f, 0x06, 0x5d, 0x4c,
	0x28, 0xf3, 0xc3, 0xad, 0xeb, 0x5b, 0x50, 0x70, 0x17, 0x4a, 0xf7, 0x82, 0xbb, 0xd0, 0xbb, 0x80,
	0xde, 0xba, 0x94, 0x49, 0x26, 0x1a, 0x25, 0xc7, 0xe7, 0x80, 0x06, 0x4b, 0xe2, 0x5c, 0x64, 0x65,
	0xef, 0x41, 0x85, 0xba, 0x2b, 0xe2, 0x31, 0x21, 0x5f, 0xc3, 0x0a, 0xd2, 0x3f, 0x85, 0x4e, 0x86,
	0x5b, 0xa5, 0xd2, 0xf6, 0xa7, 0xee, 0x42, 0x67, 0xba, 0xf4, 0xaf, 0x8e, 0x55, 0xac, 0xa3, 0x6f,
	0xfd, 0x31, 0x0f, 0xf7, 0x47, 0x1e, 0x25, 0x21, 0xc3, 0x64, 0xed, 0x5f, 0x92, 0xe9, 0xd1, 0xc0,
	0x4e, 0xfc, 0xf7, 0x1a, 0x2a, 0xb6, 0xc3, 0x78, 0x62, 0xf1, 0x8b, 0x5a, 0xfd, 0xa7, 0xc6, 0xad,
	0xbc, 0x86, 0x84, 0x0e, 0x04, 0x3b, 0x56, 0x62, 0xfa, 0xcf, 0xa0, 0x91, 0xc6, 0xa3, 0x3d, 0xd0,
	0xf0, 0xf0, 0xf8, 0xe4, 0xfb, 0xa1, 0x35, 0x38, 0xc0, 0x47, 0xed, 0x1c, 0x47, 0x8c, 0xc6, 0xd3,
	0x21, 0x9e, 0x49, 0x44, 0x9e, 0xbb, 0x44, 0x98, 0x93, 0xb9, 0x5c, 0xff, 0x42, 0x19, 0x19, 0x61,
	0x95, 0x91, 0x0f, 0xa0, 0xe6, 0x0a, 0x85, 0xc8, 0x42, 0x79, 0x25, 0x86, 0xf5, 0x3f, 0x15, 0xa0,
	0x79, 0x38, 0x1b, 0x4c, 0x36, 0xf3, 0x54, 0x36, 0x5c, 0x90, 0xeb, 0xc0, 0x66, 0xcb, 0x5e, 0x7e,
	0xbf, 0xf8, 0xac, 0x89, 0x23, 0x10, 0xbd, 0x00, 0x8d, 0x3a, 0xa1, 0x1b, 0x30, 0x8b, 0x5d, 0x07,
	0xb2, 0x27, 0xb4, 0xfa, 0x2d, 0xe3, 0x70, 0x36, 0x98, 0x0a, 0xf4, 0xec, 0x3a, 0x20, 0x18, 0x68,
	0x7c, 0x46, 0x8f, 0x78, 0x53, 0x71, 0x65, 0xbd, 0xb5, 0xfa, 0x35, 0xce, 0x39, 0xf0, 0x5d, 0x0f,
	0x0b, 0x2c, 0xfa, 0x06, 0x34, 0x7f, 0xc3, 0x82, 0x8d, 0xba, 0xae, 0x24, 0x98, 0xee, 0x1b, 0x19,
	0x6d, 0x8c, 0x13, 0xc1, 0x21, 0x6f, 0xf6, 0xe3, 0x33, 0x57, 0x72, 0xe1, 0xd2, 0x60, 0x65, 0x5f,
	0x8b, 0xda, 0xaa, 0xe1, 0x08, 0xd4, 0x0f, 0x00, 0x12, 0x19, 0x54, 0x83, 0xd2, 0x6c, 0x72, 0x7a,
	0xd8, 0xce, 0xf1, 0xd3, 0xaf, 0xf8, 0x29, 0xcf, 0x4f, 0xbf, 0xe6, 0xa7, 0x02, 0x3f, 0xfd, 0x86,
	0x9f, 0x8a, 0x48, 0x83, 0xea, 0xc1, 0xd1, 0x11, 0x1e, 0x4e, 0xa7, 0xed, 0x92, 0xfe, 0x18, 0x34,
	0xa1, 0x81, 0x72, 0x5f, 0x1b, 0x8a, 0xc1, 0x66, 0xae, 0x92, 0x84, 0x1f, 0xf5, 0x2b, 0x00, 0x99,
	0x47, 0xbc, 0x2d, 0x6d, 0xe7, 0x50, 0xb6, 0x3a, 0x0a, 0x1f, 0x50, 0x1d, 0x45, 0xc1, 0xb3, 0x55,
	0x1d, 0x71, 0xdd, 0x97, 0x32, 0x75, 0xdf, 0xc9, 0x54, 0x82, 0xd2, 0xf0, 0x31, 0x94, 0x5c, 0xef,
	0xcc, 0x17, 0xf1, 0xd2, 0xfa, 0x9a, 0x91, 0x28, 0x87, 0x05, 0x41, 0xff, 0x6f, 0x1e, 0x10, 0x0f,
	0x93, 0x7b, 0xee, 0x8d, 0x3c, 0x97, 0x25, 0x75, 0x2c, 0xe3, 0x93, 0xdf, 0x19, 0x9f, 0xff, 0x3b,
	0xdc, 0x4f, 0xa0, 0x39, 0x77, 0x83, 0x97, 0x2f, 0x2d, 0xdb, 0x71, 0xfc, 0x8d, 0x17, 0x19, 0xd6,
	0x10, 0xc8, 0x03, 0x89, 0x4b, 0xb7, 0xe1, 0x92, 0x20, 0xc7, 0x6d, 0xf8, 0x23, 0x00, 0x6f, 0xb3,
	0xb6, 0x5c, 0x2f, 0xd8, 0x30, 0xaa, 0x5a, 0x66, 0xdd, 0xdb, 0xac, 0x47, 0x02, 0x81, 0x1e, 0x83,
	0xc6, 0xc9, 0x32, 0x09, 0x68, 0xaf, 0x22, 0xe8, 0x5c, 0x42, 0x86, 0x9b, 0x8a, 0xc6, 0xe7, 0x3b,
	0x17, 0xdc, 0x8d, 0xbd, 0xaa, 0xa0, 0xc6, 0xb0, 0xfe, 0xd7, 0x3c, 0x74, 0x94, 0x03, 0xc6, 0xe4,
	0x3d, 0x8b, 0x3d, 0xf7, 0x53, 0x28, 0x09, 0xe3, 0xf2, 0x49, 0xf2, 0x6d, 0xf3, 0x18, 0xc2, 0x4e,
	0xc1, 0x86, 0xba, 0x50, 0x76, 0xbd, 0x05, 0x79, 0xaf, 0xc2, 0x2a, 0x01, 0x1e, 0xa9, 0x85, 0xcd,
	0x6c, 0x61, 0x4f, 0x03, 0x8b, 0xb3, 0xfe, 0x5b, 0x28, 0x09, 0x9f, 0x88, 0xca, 0x9d, 0x9c, 0xce,
	0xac, 0xc9, 0xc1, 0x74, 0xfa, 0x45, 0x3b, 0x87, 0x00, 0x2a, 0x27, 0xa7, 0xb3, 0xc9, 0xe9, 0xac,
	0x9d, 0x47, 0xf7, 0x00, 0x25, 0xc4, 0xbe, 0x35, 0x38, 0x39, 0x3e, 0x1e, 0xcd, 0xda, 0x05, 0xd4,
	0x85, 0x76, 0x1a, 0x3f, 0x1d, 0xfd, 0x72, 0xdc, 0x2e, 0xf2, 0x6c, 0x3d, 0x3a, 0x19, 0x0f, 0xdb,
	0x25, 0xfd, 0xef, 0x85, 0xd8, 0x1a, 0xe1, 0x9c, 0x28, 0x9e, 0x7d, 0xae, 0x5e, 0xb0, 0x91, 0xbd,
	0x4f, 0xeb, 0x3f, 0x30, 0x76, 0x30, 0x19, 0x02, 0x30, 0x73, 0x58, 0xb2, 0x22, 0x1d, 0x4a, 0xd4,
	0x3d, 0xf7, 0x84, 0x45, 0x5a, 0xbf, 0x61, 0x70, 0x7e, 0xc5, 0x6a, 0xe6, 0xb0, 0xa0, 0x3d, 0xf8,
	0x47, 0x1e, 0xca, 0x42, 0x8c, 0x8f, 0xd9, 0x20, 0x24, 0x97, 0x27, 0x1b, 0x66, 0xda, 0x74, 0xa9,
	0xc6, 0x45, 0x1a, 0x85, 0x74, 0x68, 0x28, 0x70, 0x94, 0xf2, 0x54, 0x06, 0x97, 0xe2, 0xf9, 0xde,
	0x5e, 0x6d, 0x88, 0xc8, 0x93, 0x12, 0xce, 0xe0, 0x78, 0x34, 0x29, 0x57, 0xc3, 0x73, 0x88, 0x4a,
	0x94, 0x18, 0x4e, 0xb7, 0xa8, 0x4a, 0xb6, 0x45, 0xf5, 0xe1, 0xee, 0xd2, 0xa7, 0xcc, 0xf2, 0x7c,
	0xcf, 0x21, 0x96, 0xe3, 0xaf, 0xd7, 0x2e, 0xe3, 0x73, 0x56, 0x24, 0x44, 0x03, 0x77, 0x38, 0x71,
	0xcc, 0x69, 0x83, 0x98, 0x74, 0x58, 0x87, 0x6a, 0xa8, 0x1a, 0xe8, 0x9f, 0xf3, 0xd0, 0x55, 0x3e,
	0x93, 0x59, 0x95, 0x1a, 0xc2, 0xfe, 0x26, 0xa4, 0xaa, 0x7d, 0x8a, 0x33, 0xf7, 0xdc, 0x76, 0x61,
	0xa4, 0xba, 0x55, 0x9c, 0x30, 0x97, 0x29, 0x13, 0x25, 0xc0, 0x6f, 0x5b, 0x72, 0xf7, 0xa9, 0x84,
	0xe1, 0xe7, 0xb4, 0x4d, 0xe5, 0x8c, 0x4d, 0xfa, 0x6b, 0x78, 0x32, 0x25, 0xec, 0xf8, 0xb6, 0xe7,
	0x47, 0x66, 0x8a, 0xcb, 0x17, 0x8b, 0xd4, 0x32, 0x02, 0xf5, 0x57, 0x70, 0x7f, 0x42, 0xc2, 0x33,
	0x3f, 0x5c, 0x1f, 0x30, 0xc6, 0xdb, 0x90, 0x18, 0x3e, 0xc9, 0x2c, 0x77, 0x96, 0xf6, 0x6a, 0x45,
	0x3c, 0xf5, 0x5e, 0x68, 0xe0, 0x04, 0xa1, 0xff, 0x27, 0x0f, 0x0f, 0x76, 0xc9, 0xaa, 0xf2, 0x79,
	0x0a, 0x7b, 0x73, 0xdf, 0x67, 0x2b, 0xdf, 0x5e, 0x90, 0xd0, 0x5a, 0x26, 0x29, 0xd1, 0x4a, 0xd0,
	0x22, 0x2b, 0x9e, 0x40, 0x73, 0x21, 0x5e, 0x2b, 0x56, 0xb0, 0x99, 0x5f, 0x90, 0x6b, 0xe1, 0xb4,
	0x06, 0x6e, 0x48, 0xe4, 0x44, 0xe0, 0x78, 0x72, 0x39, 0x24, 0x64, 0xee, 0x99, 0xeb, 0xd8, 0x4c,
	0xba, 0xac, 0x81, 0xd3, 0x28, 0xf4, 0x12, 0xee, 0x85, 0xbe, 0xcf, 0xd4, 0x25, 0x96, 0xbb, 0x20,
	0x1e, 0xa7, 0x91, 0x50, 0xb9, 0xb2, 0xcb, 0xa9, 0xf2, 0xb6, 0x51, 0x4c, 0x43, 0x2f, 0xa0, 0x13,
	0x5b, 0x64, 0xf1, 0x84, 0xb6, 0xd9, 0x26, 0x24, 0xa2, 0xc3, 0x34, 0x30, 0x8a, 0x49, 0xd3, 0x88,
	0xa2, 0xef, 0x41, 0x13, 0x13, 0x6e, 0x41, 0x34, 0x58, 0xff, 0x92, 0x87, 0xe6, 0x70, 0x66, 0x7e,
	0xd0, 0x94, 0x8c, 0x9a, 0x6a, 0x41, 0x35, 0xd5, 0xe1, 0xcc, 0xbc, 0x7d, 0xe8, 0x15, 0x55, 0xdf,
	0xc9, 0x5c, 0xfe, 0x01, 0x43, 0xaf, 0x94, 0x1d, 0x7a, 0x4f, 0x32, 0x43, 0x2f, 0x35, 0xcc, 0x52,
	0x73, 0x4f, 0xff, 0x67, 0x1e, 0x5a, 0xc3, 0x99, 0x99, 0x2a, 0xf0, 0x1b, 0x03, 0x20, 0xab, 0x6b,
	0xca, 0xc6, 0x42, 0xd6, 0xc6, 0x2e, 0x94, 0x45, 0x85, 0xa9, 0x18, 0x49, 0x00, 0x3d, 0x84, 0xfa,
	0xb9, 0x4d, 0xad, 0x20, 0x74, 0x55, 0xcd, 0x36, 0x70, 0xed, 0xdc, 0xa6, 0x13, 0x0e, 0x47, 0xc4,
	0x95, 0xbb, 0x76, 0x99, 0x72, 0x3d, 0x27, 0xbe, 0xe5, 0x30, 0x4f, 0xc2, 0x90, 0x38, 0x6e, 0xe0,
	0xf2, 0x52, 0xad, 0xc8, 0x24, 0x8c, 0x11, 0x49, 0x11, 0xc9, 0x22, 0x4e, 0x8a, 0x48, 0x74, 0xdd,
	0x5a, 0xaa, 0xeb, 0xbe, 0x80, 0xbd, 0xd8, 0x42, 0x95, 0xa2, 0x8f, 0xa0, 0x9e, 0x84, 0x5c, 0xe5,
	0x77, 0x8c, 0xd0, 0xe7, 0x00, 0xc3, 0x99, 0x19, 0xb9, 0x43, 0x4f, 0x26, 0xbd, 0xd6, 0x6f, 0x65,
	0x83, 0x62, 0xe6, 0xc4, 0xec, 0x47, 0x9f, 0x66, 0xfa, 0xe5, 0x9e, 0x91, 0xf5, 0x68, 0xd4, 0x32,
	0xd3, 0x4d, 0xc5, 0x01, 0x4d, 0x7c, 0x43, 0x29, 0xb4, 0x9f, 0xfe, 0x48, 0xc3, 0x48, 0xbd, 0x34,
	0xa2, 0x4f, 0x7c, 0x96, 0xf9, 0x44, 0xdb, 0xd8, 0x32, 0x29, 0xfe, 0x06, 0x40, 0x2d, 0x54, 0x38,
	0xfd, 0x73, 0xd0, 0xd2, 0x81, 0xfd, 0x08, 0x20, 0xe9, 0x83, 0x91, 0xd9, 0x71, 0xf3, 0xd3, 0xff,
	0x55, 0x87, 0x6a, 0xc4, 0xfa, 0x0b, 0x68, 0x86, 0x62, 0x21, 0xb3, 0x52, 0xfb, 0x9a, 0xd6, 0xef,
	0x1a, 0x3b, 0xd6, 0x34, 0x33, 0x87, 0x1b, 0x61, 0x0a, 0x8d, 0xbe, 0x06, 0x4d, 0xd5, 0xb5, 0x78,
	0xab, 0x48, 0x8d, 0xef, 0x1a, 0xbb, 0x16, 0x19, 0x33, 0x87, 0x61, 0x11, 0x23, 0xd1, 0x11, 0xec,
	0x29, 0xc9, 0x78, 0x5b, 0x29, 0x0a, 0xe9, 0xfb, 0xc6, 0x6d, 0xab, 0x8d, 0x99, 0xc3, 0xad, 0x45,
	0x86, 0x80, 0xbe, 0x8c, 0xbf, 0x2f, 0x1e, 0x40, 0x25, 0x71, 0x03, 0x32, 0x6e, 0xac, 0x92, 0xc9,
	0xc7, 0xc5, 0x93, 0xed, 0x6b, 0x68, 0x50, 0xc2, 0xc4, 0xb2, 0xc7, 0x17, 0x21, 0x91, 0x8f, 0x5a,
	0xbf, 0x63, 0xdc, 0x5c, 0x8e, 0xcc, 0x1c, 0xd6, 0x68, 0x82, 0xe5, 0xde, 0x72, 0xc4, 0x46, 0x64,
	0xcd, 0xc5, 0x23, 0x4b, 0x64, 0x2b, 0xf7, 0xd6, 0x8e, 0x3d, 0x89, 0x7b, 0xcb, 0x49, 0xa1, 0xb9,
	0x30, 0x5d, 0xfa, 0x57, 0x56, 0xb4, 0x4a, 0x8a, 0x84, 0xe6, 0xc2, 0x3b, 0x76, 0x0e, 0x2e, 0x4c,
	0x53, 0x68, 0xf4, 0x13, 0xa8, 0xce, 0x99, 0xc3, 0x5b, 0x9f, 0x48, 0x79, 0x4d, 0x4e, 0x9c, 0x4c,
	0x82, 0x56, 0xe6, 0xcc, 0x99, 0x6c, 0xe6, 0xe8, 0x15, 0x34, 0x39, 0x2b, 0x4f, 0x12, 0x8b, 0xaf,
	0xc0, 0xbd, 0xba, 0xb2, 0xef, 0xe6, 0x1b, 0x90, 0xdb, 0x37, 0x67, 0x4e, 0x84, 0x45, 0xdf, 0x42,
	0x2b, 0x25, 0xca, 0xdf, 0x12, 0xa0, 0x74, 0xdc, 0xf1, 0x96, 0xe0, 0x3a, 0xc6, 0xc2, 0xfc, 0x79,
	0xf0, 0x1a, 0xf6, 0x62, 0x69, 0xd9, 0xb8, 0x7a, 0x9a, 0x4a, 0x89, 0x5d, 0x63, 0xd5, 0xcc, 0xe1,
	0xa6, 0x92, 0x97, 0x78, 0x34, 0x86, 0xae, 0x5c, 0x4d, 0xf8, 0xf2, 0xec, 0x5f, 0x12, 0x8b, 0x2e,
	0x1c, 0x3b, 0x5c, 0xf4, 0x1a, 0xea, 0x41, 0x73, 0xeb, 0x62, 0x65, 0xe6, 0x30, 0x72, 0xd3, 0x44,
	0x21, 0xc7, 0x03, 0xed, 0xf0, 0x8d, 0x28, 0xba, 0xa7, 0xa9, 0x1c, 0x71, 0x73, 0x79, 0xe2, 0x8e,
	0x10, 0xac, 0x4a, 0x72, 0x0d, 0x8f, 0x79, 0x8a, 0xfc, 0xd8, 0x8f, 0x81, 0x96, 0xb8, 0xec, 0x13,
	0xe3, 0x03, 0xa6, 0xb3, 0x99, 0xc3, 0x8f, 0xe8, 0x8f, 0xb0, 0x71, 0x45, 0x57, 0x2e, 0x65, 0x2a,
	0xab, 0x68, 0x6f, 0x4f, 0x29, 0x7a, 0x73, 0xf1, 0xe5, 0x8a, 0xae, 0x12, 0x2c, 0xfa, 0x0e, 0x5a,
	0xa1, 0xdc, 0xa2, 0xa3, 0x94, 0x6c, 0x2b, 0x97, 0xef, 0x5a, 0xae, 0xb9, 0xcb, 0xc3, 0x34, 0x1e,
	0x1d, 0x43, 0x27, 0x90, 0x13, 0xde, 0xb2, 0x93, 0x11, 0xdf, 0xbb, 0xa3, 0x3c, 0x7e, 0xeb, 0xcb,
	0x81, 0x7b, 0x3c, 0xb8, 0x41, 0x44, 0xcf, 0xa0, 0x12, 0x8a, 0xd9, 0xd9, 0x43, 0x2a, 0x4b, 0x33,
	0xa3, 0x94, 0x67, 0xa9, 0xa4, 0x27, 0xb1, 0x51, 0x6a, 0x77, 0xd2, 0xb1, 0xd9, 0x56, 0x5a, 0xc6,
	0x46, 0xa9, 0xfc, 0x18, 0x8a, 0x84, 0x2d, 0x7b, 0x5d, 0x21, 0xa0, 0x19, 0x49, 0x07, 0xe7, 0x1d,
	0x94, 0xb0, 0x65, 0xba, 0xfb, 0xfe, 0xad, 0x04, 0xb5, 0xb8, 0xf7, 0x7e, 0x02, 0x55, 0x2a, 0xff,
	0x5b, 0xa9, 0x2e, 0x57, 0x33, 0xd4, 0x7f, 0x2c, 0x33, 0x87, 0x23, 0x12, 0xfa, 0x18, 0xca, 0x24,
	0x0c, 0xfd, 0x50, 0xb5, 0xb3, 0x8a, 0x21, 0x7e, 0x91, 0xf1, 0x27, 0xb3, 0x40, 0xa3, 0x6f, 0xb7,
	0x3b, 0x66, 0x31, 0x72, 0xf8, 0x8e, 0x1f, 0x61, 0x37, 0x5a, 0xe6, 0x57, 0xbb, 0x5a, 0x56, 0xc7,
	0xb8, 0xf9, 0x9f, 0x6b, 0xab, 0x67, 0xa9, 0xb9, 0x51, 0xbe, 0x7d, 0x6e, 0x7c, 0x93, 0x2a, 0x7b,
	0x8f, 0xbc, 0x67, 0x71, 0x6f, 0xda, 0xb1, 0xd5, 0xa4, 0xea, 0x9e, 0xa3, 0xd1, 0xab, 0xad, 0xfc,
	0x8b, 0x3a, 0xd3, 0x8e, 0x75, 0x73, 0x3b, 0x01, 0x5f, 0x6d, 0xc5, 0xb1, 0x16, 0x75, 0xc4, 0x9b,
	0xff, 0x5b, 0xb6, 0x03, 0x39, 0xde, 0x9d, 0x7b, 0xb2, 0x5d, 0x3d, 0x34, 0x6e, 0x7f, 0x79, 0xde,
	0x92, 0x7c, 0xaf, 0xb6, 0xca, 0x1d, 0xd2, 0xaa, 0x64, 0xff, 0x8a, 0x6c, 0xd7, 0xfb, 0xbe, 0xcc,
	0x29, 0x4d, 0xb9, 0x37, 0x35, 0xb1, 0xa3, 0xa4, 0x4a, 0x8d, 0xdb, 0xe7, 0x2f, 0xa0, 0xaa, 0x96,
	0x65, 0x54, 0x85, 0xe2, 0xe1, 0x6c, 0x20, 0x5f, 0x5a, 0x33, 0x7e, 0xca, 0x73, 0xd4, 0xdb, 0xd9,
	0x40, 0xfe, 0x60, 0x98, 0xf1, 0x53, 0xf1, 0xf9, 0xef, 0xc5, 0x6f, 0x96, 0x64, 0x71, 0x46, 0x08,
	0x5a, 0xd3, 0x01, 0x1e, 0x4d, 0x66, 0xd6, 0xe9, 0xf8, 0xcd, 0xf8, 0xe4, 0xdd, 0xb8, 0x9d, 0x43,
	0x6d, 0x68, 0x28, 0xdc, 0xa4, 0x3f, 0x79, 0x63, 0xca, 0x0d, 0x31, 0xc6, 0xbc, 0x9b, 0xbc, 0x31,
	0xad, 0x49, 0x7f, 0x6a, 0xb6, 0x0b, 0xe8, 0x0e, 0x34, 0x33, 0xf8, 0x76, 0xf1, 0xb9, 0x29, 0xbe,
	0x90, 0x7d, 0x06, 0x26, 0x57, 0xd7, 0xa1, 0x1c, 0xdd, 0x59, 0x83, 0x92, 0xba, 0x05, 0xa0, 0x12,
	0x89, 0x4b, 0x86, 0x77, 0x53, 0xb3, 0x5d, 0x7a, 0xde, 0x87, 0xaa, 0x7a, 0x08, 0x72, 0x4b, 0x86,
	0x33, 0xb3, 0x9d, 0x43, 0x2d, 0x00, 0xec, 0x07, 0x94, 0x11, 0x8f, 0xc3, 0x79, 0x01, 0xbb, 0xde,
	0x05, 0x99, 0x5f, 0x73, 0xb8, 0x30, 0xaf, 0x88, 0xff, 0xc9, 0x3f, 0xff, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa8, 0xad, 0x31, 0xe4, 0x65, 0x16, 0x00, 0x00,
}
